{"version":3,"sources":["app.ts"],"names":[],"mappings":"cASA;;;;AACA,IAAI,GAAG,GAAQ;AACb,EAAA,KAAK,EAAE,GADM;AAEb,EAAA,MAAM,EAAE,GAFK;AAGb,EAAA,YAAY,EAAE,CAHD;AAIb,EAAA,eAAe,EAAE;AAJJ,CAAf,EAOA;;AACA,SAAS,OAAT,CACE,KADF,EAEE,MAFF,EAGE,YAHF,EAIE,eAJF,EAIyB;AAEvB,SAAO;AACL,IAAA,KAAK,EAAL,KADK;AAEL,IAAA,MAAM,EAAN,MAFK;AAGL,IAAA,YAAY,EAAZ,YAHK;AAIL,IAAA,eAAe,EAAf;AAJK,GAAP;AAMD,EAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,EAAc,MAAd,CAAP,EAEA;;IAEM,QAMJ,eAAY,KAAZ,EAA2B,MAA3B,EAA2C,YAA3C,EAAiE,eAAjE,EAAwF;AAAA;;AACtF,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,YAAL,GAAoB,YAApB;AACA,OAAK,eAAL,GAAuB,eAAvB;AACD,GAGH;AACA;AACA;;;AACA,IAAM,QAAQ,GAAG,IAAI,KAAJ,CAAU,EAAV,EAAc,EAAd,EAAkB,CAAlB,EAAqB,MAArB,CAAjB;;AAEA,IAAI,QAAQ,YAAY,KAAxB,EAA+B,CAC9B;;AACD,GAAG,CAAC,WAAJ,GAAkB,EAAlB;AACA,GAAG,CAAC,WAAD,CAAH,GAAmB,aAAnB,EAEA;AAEA;AACA;;AACA,IAAM,IAAI,GAAG,GAAb,EAEA;AACA;;AAEA,IAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAlB,CAAb,EACA;AACA;AACA;AAEA;;AACA,IAAM,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,GAAR,CAAA,EAAW;AAAE,EAAA,KAAK,EAAE;AAAT,CAAX,CAAV,EAEA;AACA;;AACA,IAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,GAAf,CAAX,CAAb;AAEA,GAAG,CAAC,KAAJ,GAAY,GAAZ;AACA,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,KAAjB,GAAyB;;AACzB,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,KAAjB,GAAyB;;AACzB,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,KAAjB,GAAyB","file":"app.c61986b1.js","sourceRoot":"..","sourcesContent":["type Box = {\n  width: number;\n  height: number;\n  borderRadius: number;\n  backgroundColor: string;\n  borderWidth?: number;\n  ['className']?: string;\n};\n\n// 객체 리터럴 (객체 생성 표기법)\nlet box: Box = {\n  width: 200,\n  height: 200,\n  borderRadius: 5,\n  backgroundColor: 'red',\n};\n\n// 함수를 이용한 방법 (객체 리터럴)\nfunction makeBox(\n  width: number,\n  height: number,\n  borderRadius: number,\n  backgroundColor: string\n): Box {\n  return {\n    width,\n    height,\n    borderRadius,\n    backgroundColor,\n  };\n}\n\n// 이 둘은 구조의 차이를 가진다.\n// 함수를 이용한 방법은 객체의 틀(규격)과 데이터를 분리한다.\n\n// 그렇다면 왜 객체의 규격과 사용하는 데이터를 분리하는게 중요할까 ?\n// 만약 500개의 Box를 만들어야 한다고 가정하자\n// 당연히 모든 박스의 속성값은 다양할 것이다.\n// 직접 모든것을 치는 방법으로 500개를 만들고, 함수를 이용해서 500개를 만들었다.\n// 여기서 만약에 객체의 borderRadius속성을 radius로 변경해야 한다고 하면 어떻게 될까 ?\n// 첫번째 방법으로 했을 때는 500개의 모든 borderRadius 속성을 다 변경해줘야 할것이고\n// 함수를 이용한 방법은 객체의 규격인 함수에 접근해 속성명을 변경해주기만 하면 될 것이다.\n\nmakeBox(100, 100, 0, 'blue');\n\n// 클래스를 이용한 객체 생성\n\nclass Shape implements Box {\n  width: number;\n  height: number;\n  borderRadius: number;\n  backgroundColor: string;\n\n  constructor(width: number, height: number, borderRadius: number, backgroundColor: string) {\n    this.width = width;\n    this.height = height;\n    this.borderRadius = borderRadius;\n    this.backgroundColor = backgroundColor;\n  }\n}\n\n// 클래스가 생성한 인스턴스 객체\n// 여기서 인스턴스 객체라고 하는 이유는 클래스는 구성 정보를 가지고 있고\n// 이를 실제로 현실화한 객체라는 의미로 인스턴스 객체라고 부른다.\nconst boxShape = new Shape(10, 10, 0, 'blue');\n\nif (boxShape instanceof Shape) {\n}\nbox.borderWidth = 10;\nbox['className'] = 'box rounded';\n\n// 객체는 참조 타입이기 때문에 상수에 객체를 전달해준다고 해서 서로 다른 객체를 바라보지 않는다.\n\n// 이렇게 해준다고 해서 서로 다른 객체 2개가 되지 않는다.\n// 그냥 box1,box 모두 하나의 객체를 참조하고 있을 뿐이다.\nconst box1 = box;\n\n// 그러면 해당 객체를 참조하는 것이 아닌 새로운 객체를 만들기 위해서는 어떻게 해야할까 ?\n// 총 3가지 방법이 있다.\n\nconst box2 = Object.assign({}, box);\n// Object.assign은 첫번째 인자로 변경될 객체를 전달 받고 그 뒤로는 가변인자로 여러개의 객체를 받을 수 있다.\n// 그러면 순서대로 2번째 인자부터 첫번째 인자에 덮어씌워 진다.\n// 현재는 {} 빈 객체에 box라는 객체를 덮어 씌우는 방식이다.\n\n// 이 방법을 가장 많이 사용한다.\nconst box3 = { ...box, width: 400 };\n\n// 가장 원시적인 방법이지만 확실한 방법\n// 객체를 문자열로 변경해줬다가 다시 객체로 변경하는 방법\nconst box4 = JSON.parse(JSON.stringify(box));\n\nbox.width = 300;\nconsole.log(box1.width); // 300\nconsole.log(box2.width); // 200\nconsole.log(box3.width); // 400\n"]}